import React,{useMemo,useState,useEffect,useRef}from'react';
import{addMonths,subMonths,startOfMonth,endOfMonth,startOfWeek,endOfWeek,addDays,isSameMonth,format,startOfDay,isBefore,isAfter,parseISO}from'date-fns';
import{db}from'./firebase';import{collection,addDoc,onSnapshot,updateDoc,deleteDoc,doc,serverTimestamp}from'firebase/firestore';
const roomsSeed=[{id:'r1',name:'Double Room'},{id:'r2',name:'Double or Twin Room'},{id:'r3',name:'Standard Double Room'},{id:'r4',name:'Deluxe Double Room'},{id:'r5',name:'Family Room with Balcony'},{id:'r6',name:'Cottage in the Garden'},{id:'r7',name:'Sauna'}];
const bookedCell="relative bg-red-200 text-red-900";const freeCell="bg-emerald-100 text-emerald-900";
function isBookedOn(day,roomId,bookings){return bookings.some(b=>b.roomId===roomId&&isBefore(new Date(b.start),addDays(day,1))&&isAfter(new Date(b.end),day));}
function formatISODate(d){const y=d.getFullYear();const m=String(d.getMonth()+1).padStart(2,'0');const day=String(d.getDate()).padStart(2,'0');return `${y}-${m}-${day}`;}
function RoomMonth({room,month,bookings,onTapFree,onTapBooked,isAdmin}){const monthStart=startOfMonth(month);const gridStart=startOfWeek(monthStart,{weekStartsOn:1});const gridEnd=endOfWeek(endOfMonth(monthStart),{weekStartsOn:1});const days=useMemo(()=>{const arr=[];let d=gridStart;while(d<=gridEnd){arr.push(d);d=addDays(d,1);}return arr;},[month]);return(<div className='mb-6'><div className='grid grid-cols-7 text-[11px] text-slate-500 px-1 pb-1'>{['M','T','W','T','F','S','S'].map(d=>(<div key={d} className='text-center'>{d}</div>))}</div><div className='grid grid-cols-7 gap-1'>{days.map((d,idx)=>{const inMonth=isSameMonth(d,monthStart);const booked=inMonth&&isBookedOn(d,room.id,bookings);const free=inMonth&&!booked;const base='h-7 flex items-center justify-center text-xs relative rounded-full';let cls='';if(!inMonth)cls='text-slate-300';else if(booked)cls=bookedCell;else if(free)cls=freeCell;return(<button key={idx} type='button' className={`${base} ${cls}`} onClick={()=>{if(free){if(isAdmin)onTapFree(room.id,d);}else{onTapBooked(room.id,d);}}}>{format(d,'d')}</button>);})}</div><div className='mt-2 px-1 text-sm font-semibold'>{room.name}</div></div>);}
export default function Availability({isAdmin}){const[rooms]=useState(roomsSeed);const[bookings,setBookings]=useState([]);const[month,setMonth]=useState(startOfMonth(new Date()));const[modal,setModal]=useState({open:false,mode:'create',readOnly:false,roomId:null,bookingId:null,start:'',end:'',guest:'',note:''});const noteRef=useRef(null);useEffect(()=>{const coll=collection(db,'bookings');return onSnapshot(coll,snap=>{const cloud=[];snap.forEach(ds=>cloud.push({id:ds.id,...ds.data()}));setBookings(cloud);});},[]);useEffect(()=>{if(noteRef.current){noteRef.current.style.height='auto';noteRef.current.style.height=noteRef.current.scrollHeight+'px';}},[modal.open]);function openCreate(roomId,day){if(!isAdmin)return;setModal({open:true,mode:'create',readOnly:false,roomId,bookingId:null,start:formatISODate(day),end:formatISODate(addDays(day,1)),guest:'',note:''});}function openEdit(roomId,day){const b=bookings.find(bk=>bk.roomId===roomId&&isBefore(new Date(bk.start),addDays(day,1))&&isAfter(new Date(bk.end),day));if(!b)return;setModal({open:true,mode:'edit',readOnly:!isAdmin,roomId,bookingId:b.id,start:formatISODate(new Date(b.start)),end:formatISODate(new Date(b.end)),guest:b.guest||'',note:b.note||''});}function overlapsRange(roomId,s,e,ignoreId=null){return bookings.some(b=>b.roomId===roomId&&b.id!==ignoreId&&(s<new Date(b.end)&&e>new Date(b.start)));}async function saveModal(){if(!isAdmin)return;const s=startOfDay(parseISO(modal.start));const e=startOfDay(parseISO(modal.end));if(!(e>s)){alert('End after start');return;}if(overlapsRange(modal.roomId,s,e,modal.mode==='edit'?modal.bookingId:null)){alert('Overlap');return;}setModal(m=>({...m,open:false}));if(modal.mode==='create'){await addDoc(collection(db,'bookings'),{roomId:modal.roomId,guest:modal.guest||'Guest',note:modal.note||'',start:s.toISOString(),end:e.toISOString(),createdAt:serverTimestamp()});}else{await updateDoc(doc(db,'bookings',modal.bookingId),{guest:modal.guest||'Guest',note:modal.note||'',start:s.toISOString(),end:e.toISOString()});}}async function cancelBooking(){if(!isAdmin||!modal.bookingId)return;setModal(m=>({...m,open:false}));await deleteDoc(doc(db,'bookings',modal.bookingId));}return(<div className='w-full max-w-md mx-auto p-3 pb-28'><div className='flex items-center justify-between mb-1 sticky top-0 bg-white'><button onClick={()=>setMonth(m=>subMonths(m,1))}>‹</button><div className='text-sm font-medium'>{format(month,'LLLL yyyy')}</div><button onClick={()=>setMonth(m=>addMonths(m,1))}>›</button></div><div className='bg-white rounded-2xl shadow border p-3'><div className='grid grid-cols-2 gap-x-6'>{rooms.map(r=>(<RoomMonth key={r.id} room={r} month={month} bookings={bookings} onTapFree={openCreate} onTapBooked={openEdit} isAdmin={isAdmin}/>))}</div></div>{modal.open&&(<div className='fixed inset-0 z-50'><div className='absolute inset-0 bg-black/30' onClick={()=>setModal(m=>({...m,open:false}))}/><div className='absolute inset-x-4 bottom-6 max-w-md mx-auto bg-white rounded-2xl shadow-lg border p-4'><div className='text-sm font-semibold mb-2'>{modal.mode==='create'?'Add Booking':(modal.readOnly?'Booking Details (read-only)':'Booking Details')}</div><div className='grid grid-cols-2 gap-2 text-sm'><label className='flex flex-col gap-1'><span className='text-xs text-slate-500'>Start</span><input type='date' value={modal.start} onChange={e=>setModal(m=>({...m,start:e.target.value}))} className='border rounded-lg px-2 py-1' disabled={modal.readOnly}/></label><label className='flex flex-col gap-1'><span className='text-xs text-slate-500'>End</span><input type='date' value={modal.end} onChange={e=>setModal(m=>({...m,end:e.target.value}))} className='border rounded-lg px-2 py-1' disabled={modal.readOnly}/></label><label className='col-span-2 flex flex-col gap-1'><span className='text-xs text-slate-500'>Guest name</span><input value={modal.guest} onChange={e=>setModal(m=>({...m,guest:e.target.value}))} className='border rounded-lg px-2 py-1' disabled={modal.readOnly}/></label><label className='col-span-2 flex flex-col gap-1'><span className='text-xs text-slate-500'>Note (optional)</span><textarea ref={noteRef} value={modal.note} onChange={e=>{setModal(m=>({...m,note:e.target.value}));e.target.style.height='auto';e.target.style.height=e.target.scrollHeight+'px';}} className='border rounded-lg px-2 py-2 w-full resize-none leading-relaxed overflow-hidden' rows={3} disabled={modal.readOnly}/></label></div><div className='mt-3 flex items-center justify-between'>{(modal.mode==='edit'&&!modal.readOnly)?(<button onClick={cancelBooking} className='px-3 py-2 rounded-xl border text-red-600 border-red-300'>Cancel booking</button>):(<span/>)}<div className='flex gap-2'><button onClick={()=>setModal(m=>({...m,open:false}))} className='px-3 py-2 rounded-xl border'>Close</button>{(!modal.readOnly)&&(<button onClick={saveModal} className='px-3 py-2 rounded-xl border bg-emerald-500 text-white'>Save</button>)}</div></div></div></div>)}</div>);}
